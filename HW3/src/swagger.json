{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger test Application API for Node.js course",
    "description": "Swagger test Application API for Node.js course",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3001",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to update",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "delete": {
        "summary": "Delete user with given ID",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Get all tokens in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Create new token in system",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "description": "Token that we want to create",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New token is created",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Update token in system",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "description": "Token that we want to update",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token is updated",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      }
    },
    "/tokens/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find with tokens",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Get tokens with given ID",
        "responses": {
          "200": {
            "description": "Token is found",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          }
        }
      }
    },
    "/tokens/{userId}/{tokenId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find with tokens",
          "type": "string"
        },
        {
          "name": "tokenId",
          "in": "path",
          "required": true,
          "description": "ID of tokens that we want to find with users",
          "type": "string"
        }
      ],
      "delete": {
        "summary": "Delete token with given user ID",
        "tags": [
          "Tokens"
        ],
        "responses": {
          "200": {
            "description": "Token is deleted",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateUser": {
      "required": [
        "email",
        "id"
      ],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Token": {
      "required": [
        "name",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "number",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "userId": {
          "type": "number"
        }
      }
    },
    "Tokens": {
      "type": "array",
      "$ref": "#/definitions/Token"
    },
    "User": {
      "required": [
        "email",
        "id"
      ],
      "properties": {
        "id": {
          "type": "number",
          "uniqueItems": true
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    }
  }
}
